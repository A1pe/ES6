//var hello = "lalalalalal";

// const 는 그 변수명에 할당된 값이 변경이 되지 않게 한다.
// 즉 그 변수명에 할당된 값이 오브젝트같은 레퍼런스 자료형이라면
// 해당 자료형이 가진 지역변수들의 값은 변할 수 있다.

// 자바스크립트는 절차적인 과정에 따라 위에서 아래로 코드를 실행한다.
// hoisted 이라는 기능은 변수를 선언하고 값을 대입하면
// 자바스크립트 내부적으로 변수명의 선언부를 최상단에 위치시키는 것을 말한다.
/*
console.log(myName);
var myName = "Nico";
*/
// 이런 코드가
/*
var myName;
console.log(myName);
myName = "Nico";
*/
// 와 같이 변한다.
// 하지만 var 의 특징을 이어받은 let은 이런 일이 일어나지 않는다.
// 즉 에러를 뿜어낸다. 이런 것을 Temporal Dead Zone 이라고 부른다.

// 전역변수와 지역변수의 개념처럼 자바스크립트에도 블럭 안을 지역으로 본다.
// 이것을 block scope를 가진다고 표현한다.
// 하지만 var 은 좀 특별하다.
// var은 function scope를 가진다고 한다.
// 즉 전역 지역 개념이 있지만, 함수 안에서만 그 개념이 작동한다.(??????)
// 하하하...환장하겠네

// 그러니까 let 또는 const만을 사용하자.
